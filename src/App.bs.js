// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Antd = require("antd");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ApolloLinks = require("reason-apollo/src/ApolloLinks.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");
var OnegraphAuth = require("onegraph-auth");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var ReactHooks = require("@apollo/react-hooks");
var ApolloInMemoryCache = require("reason-apollo/src/ApolloInMemoryCache.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Query$ReasonApolloHooks = require("reason-apollo-hooks/src/Query.bs.js");
var Mutation$ReasonApolloHooks = require("reason-apollo-hooks/src/Mutation.bs.js");
var PodcastCard$ReactHooksTemplate = require("./PodcastCard.bs.js");

var appId = "f5114691-90b4-4746-9375-4f329499ae5c";

var inMemoryCache = ApolloInMemoryCache.createInMemoryCache(undefined, undefined, /* () */0);

var httpLink = ApolloLinks.createHttpLink("https://serve.onegraph.com/graphql?app_id=f5114691-90b4-4746-9375-4f329499ae5c", undefined, undefined, undefined, undefined, undefined, /* () */0);

var client = ReasonApollo.createApolloClient(httpLink, inMemoryCache, undefined, undefined, undefined, undefined, /* () */0);

var authConfig = {
  appId: appId,
  oneGraphOrigin: "https://serve.onegraph.io"
};

var auth = new OnegraphAuth.OneGraphAuth(authConfig);

var Client = /* module */[
  /* inMemoryCache */inMemoryCache,
  /* httpLink */httpLink,
  /* client */client,
  /* authConfig */authConfig,
  /* auth */auth
];

var ppx_printed_query = "query RssFeed($url: String!)  {\nrss  {\nrss2Feed(url: $url)  {\ntitle  \ndescription  \nimage  {\nuri  \nlink  \ntitle  \nwidth  \nheight  \ndescription  \n}\n\nitems  {\ntitle  \npubDate  \nsource  {\ndata  \nurl  \n}\n\nguid  {\ndata  \npermalink  \n}\n\nenclosure  {\nurl  \nlength  \nmime  \n}\n\ncontent  \ndescription  \nauthor  \n}\n\n}\n\n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_dict.get(Caml_option.valFromOption(match), "rss");
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeObject(Caml_option.valFromOption(match$1));
      if (match$2 !== undefined) {
        var match$3 = Js_dict.get(Caml_option.valFromOption(match$2), "rss2Feed");
        var tmp$1;
        if (match$3 !== undefined) {
          var match$4 = Js_json.decodeObject(Caml_option.valFromOption(match$3));
          if (match$4 !== undefined) {
            var value$1 = Caml_option.valFromOption(match$4);
            var match$5 = Js_dict.get(value$1, "title");
            var tmp$2;
            if (match$5 !== undefined) {
              var value$2 = Caml_option.valFromOption(match$5);
              var match$6 = Js_json.decodeString(value$2);
              tmp$2 = match$6 !== undefined ? match$6 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
            } else {
              tmp$2 = Js_exn.raiseError("graphql_ppx: Field title on type Rss2Channel is missing");
            }
            var match$7 = Js_dict.get(value$1, "description");
            var tmp$3;
            if (match$7 !== undefined) {
              var value$3 = Caml_option.valFromOption(match$7);
              var match$8 = Js_json.decodeString(value$3);
              tmp$3 = match$8 !== undefined ? match$8 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$3));
            } else {
              tmp$3 = Js_exn.raiseError("graphql_ppx: Field description on type Rss2Channel is missing");
            }
            var match$9 = Js_dict.get(value$1, "image");
            var tmp$4;
            if (match$9 !== undefined) {
              var value$4 = Caml_option.valFromOption(match$9);
              var match$10 = Js_json.decodeNull(value$4);
              if (match$10 !== undefined) {
                tmp$4 = undefined;
              } else {
                var match$11 = Js_json.decodeObject(value$4);
                var tmp$5;
                if (match$11 !== undefined) {
                  var value$5 = Caml_option.valFromOption(match$11);
                  var match$12 = Js_dict.get(value$5, "uri");
                  var tmp$6;
                  if (match$12 !== undefined) {
                    var value$6 = Caml_option.valFromOption(match$12);
                    var match$13 = Js_json.decodeString(value$6);
                    tmp$6 = match$13 !== undefined ? match$13 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
                  } else {
                    tmp$6 = Js_exn.raiseError("graphql_ppx: Field uri on type Rss2FeedImage is missing");
                  }
                  var match$14 = Js_dict.get(value$5, "link");
                  var tmp$7;
                  if (match$14 !== undefined) {
                    var value$7 = Caml_option.valFromOption(match$14);
                    var match$15 = Js_json.decodeString(value$7);
                    tmp$7 = match$15 !== undefined ? match$15 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
                  } else {
                    tmp$7 = Js_exn.raiseError("graphql_ppx: Field link on type Rss2FeedImage is missing");
                  }
                  var match$16 = Js_dict.get(value$5, "title");
                  var tmp$8;
                  if (match$16 !== undefined) {
                    var value$8 = Caml_option.valFromOption(match$16);
                    var match$17 = Js_json.decodeString(value$8);
                    tmp$8 = match$17 !== undefined ? match$17 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$8));
                  } else {
                    tmp$8 = Js_exn.raiseError("graphql_ppx: Field title on type Rss2FeedImage is missing");
                  }
                  var match$18 = Js_dict.get(value$5, "width");
                  var tmp$9;
                  if (match$18 !== undefined) {
                    var value$9 = Caml_option.valFromOption(match$18);
                    var match$19 = Js_json.decodeNumber(value$9);
                    tmp$9 = match$19 !== undefined ? match$19 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$9));
                  } else {
                    tmp$9 = Js_exn.raiseError("graphql_ppx: Field width on type Rss2FeedImage is missing");
                  }
                  var match$20 = Js_dict.get(value$5, "height");
                  var tmp$10;
                  if (match$20 !== undefined) {
                    var value$10 = Caml_option.valFromOption(match$20);
                    var match$21 = Js_json.decodeNumber(value$10);
                    tmp$10 = match$21 !== undefined ? match$21 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$10));
                  } else {
                    tmp$10 = Js_exn.raiseError("graphql_ppx: Field height on type Rss2FeedImage is missing");
                  }
                  var match$22 = Js_dict.get(value$5, "description");
                  var tmp$11;
                  if (match$22 !== undefined) {
                    var value$11 = Caml_option.valFromOption(match$22);
                    var match$23 = Js_json.decodeNull(value$11);
                    if (match$23 !== undefined) {
                      tmp$11 = undefined;
                    } else {
                      var match$24 = Js_json.decodeString(value$11);
                      tmp$11 = match$24 !== undefined ? match$24 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$11));
                    }
                  } else {
                    tmp$11 = undefined;
                  }
                  tmp$5 = {
                    uri: tmp$6,
                    link: tmp$7,
                    title: tmp$8,
                    width: tmp$9,
                    height: tmp$10,
                    description: tmp$11
                  };
                } else {
                  tmp$5 = Js_exn.raiseError("graphql_ppx: Object is not a value");
                }
                tmp$4 = Caml_option.some(tmp$5);
              }
            } else {
              tmp$4 = undefined;
            }
            var match$25 = Js_dict.get(value$1, "items");
            var tmp$12;
            if (match$25 !== undefined) {
              var value$12 = Caml_option.valFromOption(match$25);
              var match$26 = Js_json.decodeArray(value$12);
              tmp$12 = match$26 !== undefined ? match$26.map((function (value) {
                        var match = Js_json.decodeObject(value);
                        if (match !== undefined) {
                          var value$1 = Caml_option.valFromOption(match);
                          var match$1 = Js_dict.get(value$1, "title");
                          var tmp;
                          if (match$1 !== undefined) {
                            var value$2 = Caml_option.valFromOption(match$1);
                            var match$2 = Js_json.decodeString(value$2);
                            tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
                          } else {
                            tmp = Js_exn.raiseError("graphql_ppx: Field title on type Rss2FeedItem is missing");
                          }
                          var match$3 = Js_dict.get(value$1, "pubDate");
                          var tmp$1;
                          if (match$3 !== undefined) {
                            var value$3 = Caml_option.valFromOption(match$3);
                            var match$4 = Js_json.decodeNull(value$3);
                            if (match$4 !== undefined) {
                              tmp$1 = undefined;
                            } else {
                              var match$5 = Js_json.decodeNumber(value$3);
                              tmp$1 = match$5 !== undefined ? match$5 : Js_exn.raiseError("graphql_ppx: Expected float, got " + JSON.stringify(value$3));
                            }
                          } else {
                            tmp$1 = undefined;
                          }
                          var match$6 = Js_dict.get(value$1, "source");
                          var tmp$2;
                          if (match$6 !== undefined) {
                            var value$4 = Caml_option.valFromOption(match$6);
                            var match$7 = Js_json.decodeNull(value$4);
                            if (match$7 !== undefined) {
                              tmp$2 = undefined;
                            } else {
                              var match$8 = Js_json.decodeObject(value$4);
                              var tmp$3;
                              if (match$8 !== undefined) {
                                var value$5 = Caml_option.valFromOption(match$8);
                                var match$9 = Js_dict.get(value$5, "data");
                                var tmp$4;
                                if (match$9 !== undefined) {
                                  var value$6 = Caml_option.valFromOption(match$9);
                                  var match$10 = Js_json.decodeString(value$6);
                                  tmp$4 = match$10 !== undefined ? match$10 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$6));
                                } else {
                                  tmp$4 = Js_exn.raiseError("graphql_ppx: Field data on type Rss2Source is missing");
                                }
                                var match$11 = Js_dict.get(value$5, "url");
                                var tmp$5;
                                if (match$11 !== undefined) {
                                  var value$7 = Caml_option.valFromOption(match$11);
                                  var match$12 = Js_json.decodeString(value$7);
                                  tmp$5 = match$12 !== undefined ? match$12 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$7));
                                } else {
                                  tmp$5 = Js_exn.raiseError("graphql_ppx: Field url on type Rss2Source is missing");
                                }
                                tmp$3 = {
                                  data: tmp$4,
                                  url: tmp$5
                                };
                              } else {
                                tmp$3 = Js_exn.raiseError("graphql_ppx: Object is not a value");
                              }
                              tmp$2 = Caml_option.some(tmp$3);
                            }
                          } else {
                            tmp$2 = undefined;
                          }
                          var match$13 = Js_dict.get(value$1, "guid");
                          var tmp$6;
                          if (match$13 !== undefined) {
                            var value$8 = Caml_option.valFromOption(match$13);
                            var match$14 = Js_json.decodeNull(value$8);
                            if (match$14 !== undefined) {
                              tmp$6 = undefined;
                            } else {
                              var match$15 = Js_json.decodeObject(value$8);
                              var tmp$7;
                              if (match$15 !== undefined) {
                                var value$9 = Caml_option.valFromOption(match$15);
                                var match$16 = Js_dict.get(value$9, "data");
                                var tmp$8;
                                if (match$16 !== undefined) {
                                  var value$10 = Caml_option.valFromOption(match$16);
                                  var match$17 = Js_json.decodeString(value$10);
                                  tmp$8 = match$17 !== undefined ? match$17 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$10));
                                } else {
                                  tmp$8 = Js_exn.raiseError("graphql_ppx: Field data on type Rss2Guid is missing");
                                }
                                var match$18 = Js_dict.get(value$9, "permalink");
                                var tmp$9;
                                if (match$18 !== undefined) {
                                  var value$11 = Caml_option.valFromOption(match$18);
                                  var match$19 = Js_json.decodeBoolean(value$11);
                                  tmp$9 = match$19 !== undefined ? match$19 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$11));
                                } else {
                                  tmp$9 = Js_exn.raiseError("graphql_ppx: Field permalink on type Rss2Guid is missing");
                                }
                                tmp$7 = {
                                  data: tmp$8,
                                  permalink: tmp$9
                                };
                              } else {
                                tmp$7 = Js_exn.raiseError("graphql_ppx: Object is not a value");
                              }
                              tmp$6 = Caml_option.some(tmp$7);
                            }
                          } else {
                            tmp$6 = undefined;
                          }
                          var match$20 = Js_dict.get(value$1, "enclosure");
                          var tmp$10;
                          if (match$20 !== undefined) {
                            var value$12 = Caml_option.valFromOption(match$20);
                            var match$21 = Js_json.decodeNull(value$12);
                            if (match$21 !== undefined) {
                              tmp$10 = undefined;
                            } else {
                              var match$22 = Js_json.decodeObject(value$12);
                              var tmp$11;
                              if (match$22 !== undefined) {
                                var value$13 = Caml_option.valFromOption(match$22);
                                var match$23 = Js_dict.get(value$13, "url");
                                var tmp$12;
                                if (match$23 !== undefined) {
                                  var value$14 = Caml_option.valFromOption(match$23);
                                  var match$24 = Js_json.decodeString(value$14);
                                  tmp$12 = match$24 !== undefined ? match$24 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$14));
                                } else {
                                  tmp$12 = Js_exn.raiseError("graphql_ppx: Field url on type Rss2Enclosure is missing");
                                }
                                var match$25 = Js_dict.get(value$13, "length");
                                var tmp$13;
                                if (match$25 !== undefined) {
                                  var value$15 = Caml_option.valFromOption(match$25);
                                  var match$26 = Js_json.decodeNumber(value$15);
                                  tmp$13 = match$26 !== undefined ? match$26 | 0 : Js_exn.raiseError("graphql_ppx: Expected int, got " + JSON.stringify(value$15));
                                } else {
                                  tmp$13 = Js_exn.raiseError("graphql_ppx: Field length on type Rss2Enclosure is missing");
                                }
                                var match$27 = Js_dict.get(value$13, "mime");
                                var tmp$14;
                                if (match$27 !== undefined) {
                                  var value$16 = Caml_option.valFromOption(match$27);
                                  var match$28 = Js_json.decodeString(value$16);
                                  tmp$14 = match$28 !== undefined ? match$28 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$16));
                                } else {
                                  tmp$14 = Js_exn.raiseError("graphql_ppx: Field mime on type Rss2Enclosure is missing");
                                }
                                tmp$11 = {
                                  url: tmp$12,
                                  length: tmp$13,
                                  mime: tmp$14
                                };
                              } else {
                                tmp$11 = Js_exn.raiseError("graphql_ppx: Object is not a value");
                              }
                              tmp$10 = Caml_option.some(tmp$11);
                            }
                          } else {
                            tmp$10 = undefined;
                          }
                          var match$29 = Js_dict.get(value$1, "content");
                          var tmp$15;
                          if (match$29 !== undefined) {
                            var value$17 = Caml_option.valFromOption(match$29);
                            var match$30 = Js_json.decodeString(value$17);
                            tmp$15 = match$30 !== undefined ? match$30 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$17));
                          } else {
                            tmp$15 = Js_exn.raiseError("graphql_ppx: Field content on type Rss2FeedItem is missing");
                          }
                          var match$31 = Js_dict.get(value$1, "description");
                          var tmp$16;
                          if (match$31 !== undefined) {
                            var value$18 = Caml_option.valFromOption(match$31);
                            var match$32 = Js_json.decodeNull(value$18);
                            if (match$32 !== undefined) {
                              tmp$16 = undefined;
                            } else {
                              var match$33 = Js_json.decodeString(value$18);
                              tmp$16 = match$33 !== undefined ? match$33 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$18));
                            }
                          } else {
                            tmp$16 = undefined;
                          }
                          var match$34 = Js_dict.get(value$1, "author");
                          var tmp$17;
                          if (match$34 !== undefined) {
                            var value$19 = Caml_option.valFromOption(match$34);
                            var match$35 = Js_json.decodeNull(value$19);
                            if (match$35 !== undefined) {
                              tmp$17 = undefined;
                            } else {
                              var match$36 = Js_json.decodeString(value$19);
                              tmp$17 = match$36 !== undefined ? match$36 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$19));
                            }
                          } else {
                            tmp$17 = undefined;
                          }
                          return {
                                  title: tmp,
                                  pubDate: tmp$1,
                                  source: tmp$2,
                                  guid: tmp$6,
                                  enclosure: tmp$10,
                                  content: tmp$15,
                                  description: tmp$16,
                                  author: tmp$17
                                };
                        } else {
                          return Js_exn.raiseError("graphql_ppx: Object is not a value");
                        }
                      })) : Js_exn.raiseError("graphql_ppx: Expected array, got " + JSON.stringify(value$12));
            } else {
              tmp$12 = Js_exn.raiseError("graphql_ppx: Field items on type Rss2Channel is missing");
            }
            tmp$1 = {
              title: tmp$2,
              description: tmp$3,
              image: tmp$4,
              items: tmp$12
            };
          } else {
            tmp$1 = Js_exn.raiseError("graphql_ppx: Object is not a value");
          }
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Field rss2Feed on type RssQuery is missing");
        }
        tmp = {
          rss2Feed: tmp$1
        };
      } else {
        tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
      }
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field rss on type Query is missing");
    }
    return {
            rss: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make(url, param) {
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "url",
                  url
                ]]),
          parse: parse
        };
}

function makeWithVariables(variables) {
  var url = variables.url;
  return {
          query: ppx_printed_query,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "url",
                  url
                ]]),
          parse: parse
        };
}

function ret_type(f) {
  return /* module */[];
}

var MT_Ret = /* module */[];

var RssFeedQueryConfig = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var RssFeedQuery = Query$ReasonApolloHooks.Make([
      ppx_printed_query,
      parse
    ]);

function App$RssFeed(Props) {
  var url = Props.url;
  var setAudioUrl = Props.setAudioUrl;
  var audioUrl = Props.audioUrl;
  var variables = make(url, /* () */0).variables;
  var match = Curry._7(RssFeedQuery[/* use */0], Caml_option.some(variables), undefined, undefined, /* NetworkOnly */1, /* All */2, undefined, /* () */0);
  var full = match[1];
  var data = full[/* data */0];
  if (full[/* loading */1]) {
    return React.createElement("p", undefined, "Loading...");
  } else {
    var refetch = full[/* refetch */3];
    var error = full[/* error */2];
    var jsonify = function (data) {
      return React.createElement("pre", undefined, JSON.stringify(data, null, 2));
    };
    var dataEl = Belt_Option.mapWithDefault(data, "No data", jsonify);
    var errorEl = Belt_Option.mapWithDefault(error, null, jsonify);
    var podcastList = Belt_Option.getWithDefault(Belt_Option.map(Belt_Option.map(data, (function (data) {
                    return data.rss;
                  })), (function (rss) {
                var __x = rss.rss2Feed.items;
                return $$Array.map((function (item) {
                              return React.createElement(PodcastCard$ReactHooksTemplate.make, {
                                          item: item,
                                          setAudioUrl: setAudioUrl,
                                          audioUrl: audioUrl,
                                          key: item.title
                                        });
                            }), __x);
              })), React.createElement("p", undefined, "No podcast items"));
    return React.createElement("div", undefined, podcastList, dataEl, errorEl, React.createElement(Antd.Button, {
                    children: "Rerun RssFeedQuery",
                    onClick: (function (_event) {
                        var exit = 0;
                        var serviceName;
                        try {
                          serviceName = Caml_array.caml_array_get(auth.findMissingAuthServices(error), 0);
                          exit = 1;
                        }
                        catch (raw_exn){
                          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                          if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
                            Curry._2(refetch, undefined, /* () */0);
                            return /* () */0;
                          } else {
                            throw exn;
                          }
                        }
                        if (exit === 1) {
                          var __x = auth.login(serviceName);
                          var __x$1 = __x.then((function (param) {
                                  return auth.isLoggedIn(serviceName);
                                }));
                          __x$1.then((function (loginSuccess) {
                                  if (loginSuccess) {
                                    console.log("Successfully logged into ", serviceName);
                                    return Promise.resolve((Curry._2(refetch, undefined, /* () */0), /* () */0));
                                  } else {
                                    return Promise.resolve((console.log("The user did not grant auth to ", serviceName), /* () */0));
                                  }
                                }));
                          return /* () */0;
                        }
                        
                      })
                  }));
  }
}

var RssFeed = /* module */[/* make */App$RssFeed];

var ppx_printed_query$1 = "mutation Example($name: String!)  {\n__typename  \ntestMutate(query: $name)  \n}\n";

function parse$1(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var value$1 = Caml_option.valFromOption(match);
    var match$1 = Js_dict.get(value$1, "__typename");
    var tmp;
    if (match$1 !== undefined) {
      var value$2 = Caml_option.valFromOption(match$1);
      var match$2 = Js_json.decodeString(value$2);
      tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(value$2));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field __typename on type Mutation is missing");
    }
    var match$3 = Js_dict.get(value$1, "testMutate");
    var tmp$1;
    if (match$3 !== undefined) {
      var value$3 = Caml_option.valFromOption(match$3);
      var match$4 = Js_json.decodeBoolean(value$3);
      tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected boolean, got " + JSON.stringify(value$3));
    } else {
      tmp$1 = Js_exn.raiseError("graphql_ppx: Field testMutate on type Mutation is missing");
    }
    return {
            __typename: tmp,
            testMutate: tmp$1
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$1(name, param) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "name",
                  name
                ]]),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var name = variables.name;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "name",
                  name
                ]]),
          parse: parse$1
        };
}

function ret_type$1(f) {
  return /* module */[];
}

var MT_Ret$1 = /* module */[];

var ExampleMutationConfig = /* module */[
  /* ppx_printed_query */ppx_printed_query$1,
  /* query */ppx_printed_query$1,
  /* parse */parse$1,
  /* make */make$1,
  /* makeWithVariables */makeWithVariables$1,
  /* ret_type */ret_type$1,
  /* MT_Ret */MT_Ret$1
];

var ExampleMutation = Mutation$ReasonApolloHooks.Make([
      ppx_printed_query$1,
      parse$1
    ]);

function App$Example(Props) {
  var name = Props.name;
  var variables = make$1(name, /* () */0).variables;
  var match = Curry._6(ExampleMutation[/* use */0], Caml_option.some(variables), undefined, undefined, undefined, undefined, /* () */0);
  var full = match[2];
  var mutation = match[0];
  if (full[/* loading */0]) {
    return React.createElement("p", undefined, "Loading...");
  } else {
    var error = full[/* error */3];
    var jsonify = function (data) {
      return React.createElement("pre", undefined, JSON.stringify(data, null, 2));
    };
    var dataEl = Belt_Option.mapWithDefault(full[/* data */2], "No data", jsonify);
    var errorEl = Belt_Option.mapWithDefault(error, null, jsonify);
    return React.createElement("div", undefined, dataEl, errorEl, React.createElement(Antd.Button, {
                    children: "Rerun ExampleMutation",
                    type: "default",
                    onClick: (function (_event) {
                        var exit = 0;
                        var serviceName;
                        try {
                          serviceName = Caml_array.caml_array_get(auth.findMissingAuthServices(error), 0);
                          exit = 1;
                        }
                        catch (raw_exn){
                          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                          if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
                            Curry._5(mutation, undefined, undefined, undefined, undefined, /* () */0);
                            return /* () */0;
                          } else {
                            throw exn;
                          }
                        }
                        if (exit === 1) {
                          var __x = auth.login(serviceName);
                          var __x$1 = __x.then((function (param) {
                                  return auth.isLoggedIn(serviceName);
                                }));
                          __x$1.then((function (loginSuccess) {
                                  if (loginSuccess) {
                                    console.log("Successfully logged into ", serviceName);
                                    return Promise.resolve((Curry._5(mutation, undefined, undefined, undefined, undefined, /* () */0), /* () */0));
                                  } else {
                                    return Promise.resolve((console.log("The user did not grant auth to ", serviceName), /* () */0));
                                  }
                                }));
                          return /* () */0;
                        }
                        
                      })
                  }));
  }
}

var Example = /* module */[/* make */App$Example];

function App(Props) {
  var match = React.useState((function () {
          return "";
        }));
  var audioUrl = match[0];
  return React.createElement(ReactHooks.ApolloProvider, {
              client: client,
              children: React.createElement("div", undefined, React.createElement(App$RssFeed, {
                        url: "https://www.heavybit.com/category/library/podcasts/jamstack-radio/feed",
                        setAudioUrl: match[1],
                        audioUrl: audioUrl
                      }), React.createElement("div", {
                        style: {
                          bottom: "20px",
                          position: "fixed",
                          right: "20px"
                        }
                      }, React.createElement("audio", {
                            autoPlay: true,
                            controls: true,
                            src: audioUrl
                          })))
            });
}

var make$2 = App;

exports.appId = appId;
exports.Client = Client;
exports.RssFeedQueryConfig = RssFeedQueryConfig;
exports.RssFeedQuery = RssFeedQuery;
exports.RssFeed = RssFeed;
exports.ExampleMutationConfig = ExampleMutationConfig;
exports.ExampleMutation = ExampleMutation;
exports.Example = Example;
exports.make = make$2;
/* inMemoryCache Not a pure module */
